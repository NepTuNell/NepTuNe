<?php

namespace CoreBundle\Repository;

use CoreBundle\Entity\Post;
use CoreBundle\Entity\User;
use CoreBundle\Entity\Sujet;
use BackendBundle\Entity\Theme;
use Doctrine\ORM\Query\Expr\Join;
 

/**
 * SujetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SujetRepository extends \Doctrine\ORM\EntityRepository
{

    public function countPostQuery()
    {

        $countQuery = $this->getEntityManager()->createQueryBuilder();

        $countPost = $countQuery->select('COUNT(p)')
                                ->from(Post::class, 'p')
                                ->where('p.sujet = u.id')
                                ->getDQL();

        return $countPost;

    }

    /**
     * Recherche tous les sujets dans un thème ou une section spécifique
     */
    public function fetchAllSubject($options = array())
    {
  
        $queryBuilder  = $this->getEntityManager()->createQueryBuilder();  
        $countPost     = $this->countPostQuery();

        if (array_key_exists('section', $options)) {
            
            $result = $queryBuilder ->select('u.id, u.libelle, u.date, s.id as id_user')
                                    ->addSelect('('.$countPost.') as nbPost')
                                    ->from(Sujet::class, 'u')
                                    ->innerJoin(User::class, 's', Join::WITH, 'u.user = s.id')
                                    ->where('u.section = :section')
                                    ->setParameters([
                                        'section'   => $options['section']
                                    ])
                                    ->orderBy('u.date', 'DESC')
                                    ->getQuery();

        } else {

            $result = $queryBuilder ->select('u.id, u.libelle, u.date, s.id as id_user')
                                    ->addSelect('('.$countPost.') as nbPost')                             
                                    ->from(Sujet::class, 'u')
                                    ->innerJoin(User::class, 's', Join::WITH, 'u.user = s.id')
                                    ->where('u.theme = :theme')
                                    ->setParameters([
                                        'theme'   => $options['theme']
                                    ])
                                    ->orderBy('u.date', 'DESC')
                                    ->getQuery();

        }

        return $result->getArrayResult();
     
    }

    /**
     * Recherche d'un ou plusieurs sujet(s) dans un thème ou une section spécifique option contient
     */
    public function fetchSubjectByLibelleContains($options = array())
    {

        $queryBuilder  = $this->getEntityManager()->createQueryBuilder();  
        $countPost     = $this->countPostQuery();

        if (array_key_exists('section', $options)) {
            
            $result = $queryBuilder ->select('u.id, u.libelle, u.date, s.id as id_user')
                                    ->addSelect('('.$countPost.') as nbPost')
                                    ->from(Sujet::class, 'u')
                                    ->innerJoin(User::class, 's', Join::WITH, 'u.user = s.id')
                                    ->where('u.libelle LIKE :libelle AND u.section = :section')
                                    ->setParameters([
                                        'libelle' => "%".$options['libelle']."%", 
                                        'section'   => $options['section']
                                    ])
                                    ->orderBy('u.date', 'DESC')
                                    ->getQuery();

        } else {

            $result = $queryBuilder ->select('u.id, u.libelle, u.date, s.id as id_user')
                                    ->addSelect('('.$countPost.') as nbPost')
                                    ->from(Sujet::class, 'u')
                                    ->innerJoin(User::class, 's', Join::WITH, 'u.user = s.id')
                                    ->where('u.libelle LIKE :libelle AND u.theme = :theme')
                                    ->setParameters([
                                        'libelle' => "%".$options['libelle']."%", 
                                        'theme'   => $options['theme']
                                    ])
                                    ->orderBy('u.date', 'DESC')
                                    ->getQuery();

        }

        return $result->getArrayResult();
     
    }

    /**
     * Recherche d'un ou plusieurs sujet(s) dans un thème ou une section spécifique option commence par
     */
    public function fetchSubjectByLibelleBegin($options = array())
    {

        $queryBuilder  = $this->getEntityManager()->createQueryBuilder(); 
        $countPost     = $this->countPostQuery();
        
        if (array_key_exists('section', $options)) {
            
            $result = $queryBuilder ->select('u.id, u.libelle, u.date, s.id as id_user')
                                    ->addSelect('('.$countPost.') as nbPost')
                                    ->from(Sujet::class, 'u')
                                    ->innerJoin(User::class, 's', Join::WITH, 'u.user = s.id')
                                    ->where('u.libelle LIKE :libelle AND u.section = :section')
                                    ->setParameters([
                                        'libelle' => $options['libelle']."%", 
                                        'section'   => $options['section']
                                    ])
                                    ->orderBy('u.date', 'DESC')
                                    ->getQuery();

        } else {

            $result = $queryBuilder ->select('u.id, u.libelle, u.date, s.id as id_user')
                                    ->addSelect('('.$countPost.') as nbPost')
                                    ->from(Sujet::class, 'u')
                                    ->innerJoin(User::class, 's', Join::WITH, 'u.user = s.id')
                                    ->where('u.libelle LIKE :libelle AND u.theme = :theme')
                                    ->setParameters([
                                        'libelle' => $options['libelle']."%", 
                                        'theme'   => $options['theme']
                                    ])
                                    ->orderBy('u.date', 'DESC')
                                    ->getQuery();

        }

        return $result->getArrayResult();
     
    }

    /**
     * Recherche des sujets les plus récents
     */
    public function fetchMyLastSubjects()
    {

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();  
        
        $result = $queryBuilder ->setMaxResults(3)
                                ->select('s')
                                ->from(Sujet::class, 's')
                                ->innerJoin(User::class, 'u')
                                ->where('s.user = u.id')
                                ->orderBy('s.date', 'DESC')
                                ->getQuery()
                                ->getResult();
                                
        return $result;
     
    }

}
