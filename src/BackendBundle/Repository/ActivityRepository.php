<?php

namespace BackendBundle\Repository;

use CoreBundle\Entity\User;
use BackendBundle\Entity\Theme;
use BackendBundle\Entity\Univers;
use BackendBundle\Entity\Activity;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Nombre de consultation tout univers confondu 
     */
    public function getActivitiesByUser(User $user)
    {

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();  
        
        $result = $queryBuilder ->select('COUNT(a)')
                                ->from(Activity::class, 'a')
                                ->where('a.user = :user')
                                ->setParameter('user', $user)
                                ->getQuery();

        return $result->getSingleScalarResult();

    }

    /**
     * Nombre de consultation pour un univers  
     */
    public function getUniversActivityByUser(User $user, Univers $univers)
    {

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();  
        
        $result = $queryBuilder ->select('COUNT(a)')
                                ->from(Activity::class, 'a')
                                ->where('a.user = :user AND a.univers = :univers')
                                ->setParameters([
                                    'user'      => $user,
                                    'univers'   => $univers
                                ])
                                ->getQuery();

        return $result->getSingleScalarResult();

    }

    /**
     * Nombre de consultation pour un theme ou sujet par Univers  
     */
    public function getThemeActivityByUser(User $user, Theme $theme)
    {

        $queryBuilder = $this->getEntityManager()->createQueryBuilder();  
        
        $result = $queryBuilder ->select('COUNT(a)')
                                ->from(Activity::class, 'a')
                                ->where('a.user = :user AND a.theme = :theme')
                                ->setParameters([
                                    'user'    => $user,
                                    'theme'   => $theme
                                ])
                                ->getQuery();

        return $result->getSingleScalarResult();

    }


}
