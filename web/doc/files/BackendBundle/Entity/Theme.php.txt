<?php

/**
 * author : Jimmy
 */

namespace BackendBundle\Entity;

use CoreBundle\Entity\Sujet;
use Doctrine\ORM\Mapping as ORM;
use BackendBundle\Entity\Univers;
use BackendBundle\Entity\Activity;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Theme
 *
 * @ORM\Table(name="theme")
 * @ORM\Entity(repositoryClass="BackendBundle\Repository\ThemeRepository")
 * @UniqueEntity(fields={"libelle"}, message="Ce thème existe déjà !")
 */
class Theme
{
    /**
     * ID du thème
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * Activités associées aux thèmes
     *
     * @ORM\OneToMany(targetEntity=Activity::class, mappedBy="theme", cascade={"persist", "remove"})
     */
    private $activities;

    /**
     * Univers auquel le thème est associé
     *
     * @ORM\ManyToOne(targetEntity=Univers::class, inversedBy="themes")
     */
    private $univers;

    /**
     * Sections associées au thème
     * 
     * @ORM\OneToMany(targetEntity=Section::class, mappedBy="theme" , cascade={"persist", "remove"})
     */
    private $sections;

    /**
     * Sujets du thème
     * 
     * @ORM\OneToMany(targetEntity=Sujet::class, mappedBy="theme")
     */
    private $sujets;

    /**
     * Libellé du thème
     *
     * @ORM\Column(name="libelle", type="string", length=255, unique=true)
     * @Assert\Length(
     *      min=4,
     *      max=25,
     *      minMessage = "Le libelle est trop court !",
     *      maxMessage = "Le libelle est trop long !"
     * )
     * @Assert\NotBlank(message="Veuillez saisir le libellé !")
     */
    private $libelle;

    /**
     * Si le thème est divisé en section
     * 
     * @ORM\Column(name="subdivise", type="boolean")
     */
    private $subdivise;

    /**
     * Constructeur de la classe.
     */
    public function __construct()
    {
        $this->sujets   = new ArrayCollection();
        $this->sections = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set univers
     *
     * @param \stdClass $univers
     *
     * @return Theme
     */
    public function setUnivers($univers)
    {
        $this->univers = $univers;

        return $this;
    }

    /**
     * Get univers
     *
     * @return \stdClass
     */
    public function getUnivers()
    {
        return $this->univers;
    }

    /**
     * Set libelle
     *
     * @param string $libelle
     *
     * @return Theme
     */
    public function setLibelle($libelle)
    {
        $this->libelle = $libelle;

        return $this;
    }

    /**
     * Get libelle
     *
     * @return string
     */
    public function getLibelle()
    {
        return $this->libelle;
    }

    /**
     * Set subdivise
     * 
     * @param subdivise
     */
    public function setSubdivise($subdivise)
    {
        $this->subdivise = $subdivise;

        return $this;
    }

    /**
     * get Subdivise
     * 
     * @return Booleen
     */
    public function getSubdivise()
    {
        return $this->subdivise;
    }

    /**
     * get Activities
     * 
     * @return ArrayCollection
     */
    public function getActivities()
    {
        return $this->activities;
    }

    /****************************************************
     *      Traitement des collections de Section
     ****************************************************/

    /**
     * Add section (collection's method)
     *
     * @param \BackendBundle\Entity\Section $section
     *
     * @return Section
     */
    public function addSection(\BackendBundle\Entity\Section $section)
    {
        $this->sections[] = $section;

        return $this;
    }

    /**
     * Remove section (collection's method)
     *
     * @param \BackendBundle\Entity\Section $section
     */
    public function removeSection(\BackendBundle\Entity\Section $section)
    {
        $this->sections->removeElement($section);
    }

    /**
     * Get sections
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSections()
    {
        return $this->sections;
    }

    /****************************************************
     *      Traitement des collections de Sujet
     ****************************************************/

    /**
     * Add sujet (collection's method)
     *
     * @param \CoreBundle\Entity\Sujet $sujet
     *
     * @return Sujet
     */
    public function addSujet(\CoreBundle\Entity\Sujet $sujet)
    {
        $this->sujets[] = $sujet;

        return $this;
    }

    /**
     * Remove sujet (collection's method)
     *
     * @param \CoreBundle\Entity\Sujet $sujet
     */
    public function removeSujet(\CoreBundle\Entity\Sujet $sujet)
    {
        $this->sujets->removeElement($sujet);
    }

    /**
     * Get sujets
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSujets()
    {
        return $this->sujets;
    }

}

